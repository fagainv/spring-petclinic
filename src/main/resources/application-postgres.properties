
database=postgres
#spring.datasource.url=${POSTGRES_URL:jdbc:postgresql://localhost/petclinic}
#spring.datasource.username=${POSTGRES_USER:petclinic}
#spring.datasource.password=${POSTGRES_PASS:petclinic}
spring.datasource.url=jdbc:postgresql://google/petclinic?cloudSqlInstance=my-postgres-instance&socketFactory=com.google.cloud.sql.postgres.SocketFactory&socketFactoryArg=fordprotesting:us-central1:my-postgres-instance&useSSL=false

# SQL is written to be idempotent so this is safe
#spring.sql.init.mode=always

# Set to the Postgres user you want to connect to; 'postgres' is the default user.
spring.datasource.username=postgres
spring.datasource.password=password123
spring.cloud.gcp.sql.database-name=petclinic
# This value is formatted in the form: [gcp-project-id]:[region]:[instance-name]
spring.cloud.gcp.sql.instance-connection-name=fordprotesting:us-central1:my-postgres-instance
# So app starts despite "table already exists" errors.
spring.datasource.continue-on-error=true
# Enforces database initialization
spring.datasource.initialization-mode=always
#spring.cloud.gcp.project-id=
#spring.cloud.gcp.credentials.location=file:/path/to/service-account.json
