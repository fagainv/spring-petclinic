# database init, supports mysql too
#database=h2
database=postgres
spring.sql.init.schema-locations=classpath*:db/${database}/schema.sql
spring.sql.init.data-locations=classpath*:db/${database}/data.sql
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect

# Web
spring.thymeleaf.mode=HTML

# JPA
spring.jpa.hibernate.ddl-auto=update
spring.jpa.open-in-view=true

# Internationalization
spring.messages.basename=messages/messages

# Actuator
management.endpoints.web.exposure.include=*

# Logging
logging.level.org.springframework=INFO
# logging.level.org.springframework.web=DEBUG
# logging.level.org.springframework.context.annotation=TRACE

# Maximum time static resources should be cached
spring.web.resources.cache.cachecontrol.max-age=12h

#spring.profiles.active=mysql
spring.profiles.active=postgres


# Set to the Postgres user you want to connect to; 'postgres' is the default user.
#spring.datasource.username=postgres
#spring.datasource.password=password123
#spring.cloud.gcp.sql.database-name=petclinic
# This value is formatted in the form: [gcp-project-id]:[region]:[instance-name]
#spring.cloud.gcp.sql.instance-connection-name=fordprotesting:us-central1:my-postgres-instance
# So app starts despite "table already exists" errors.
#spring.datasource.continue-on-error=false
# Enforces database initialization
#spring.datasource.initialization-mode=always
